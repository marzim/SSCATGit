<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasySocket</name>
    </assembly>
    <members>
        <member name="T:JadBenAutho.EasySocket.ClientInfo">
            <summary>
            <c>ClientInfo</c> class describs the location of the client machine on the net.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ClientInfo.IsLegal">
            <summary>
            Indicated whether the client's location is valid or not.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ClientInfo.ClientPoint">
            <summary>Holds all the client location data.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ClientInfo._IsEasyClient">
            <summary>Indicator for the type of the client.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.ClientInfo.#ctor(System.String,System.Boolean)">
            <summary>Creates new instance of <c>ClientInfo</c> object.</summary>
            <param name="ClientIP">The IP of the client machine or
             the name of the machine (on local neteork).</param>
            <param name="IsEasyClient">Is the client is a <c>EasyClient</c> type.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.ClientInfo.#ctor(System.Net.IPAddress,System.Boolean)">
            <summary>Creates new instance of <c>ClientInfo</c> object.</summary>
            <param name="ClientIP">The IP of the client machine.</param>
            <param name="IsEasyClient">Is the client is a <c>EasyClien</c>t type.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.ClientInfo.ToString">
            <summary>
            Returns the string representation of the <c>ClientInfo</c>.
            </summary>
            <returns>string representation of the <c>ClientInfo</c>.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.ClientInfo.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ClientInfo.ClientIPAddress">
            <summary>Gets the IP address of the client.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ClientInfo.ClientIP">
            <summary>Gets the IP address of the client.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ClientInfo.IsEasyClient">
            <summary>Indicates if the client is of <c>EasyClient</c> type.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.ComTestStart_EventHandler">
            <summary>
            Been called when a communication test begins.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.ComTestEnd_EventHandler">
            <summary>
            Been called when a communication test ends.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Disconnecting_EventHandler">
            <summary>
            Been called when the 'DisconnectFromServer' function is called.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Disconnected_EventHandler">
            <summary>
            Been called when the client disconnected from the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Connecting_EventHandler">
            <summary>
            Been called when the client attempting to connect to the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Connected_EventHandler">
            <summary>
            Been called when the client connected to the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.DataSent_EventHandler">
            <summary>
            Been called when data is sent to the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.DataArrived2Client_EventHandler">
            <summary>
            Been called when data is arrived from the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.ConnectionTimeOutError_EventHandler">
            <summary>
            Been called when a connection attempt to the server is failed,
            (Attempted to connect to server for some time without results).
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.DataSendAsyncError_EventHandler">
            <summary>
            Been called when error accures while sending data asynchroniclly using <c>DataSendAsync</c>.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.TestComAsyncError_EventHandler">
            <summary>
            Been called when error accures while testing communication asynchroniclly <c>TestCommunicationAsync</c>.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyClient">
            <summary>
            <c>EasyClient</c> is a advanced implementation of the .NET Winsock TCP\IP Client,
            It has almost everything build in.
            It was developeed and designed with the <c>EasyServer</c> class (Although they work
            excellent together and advice to do so, it can workwith any other server implementation).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient._ComTestStatus">
            <summary>
            Holds the status of the last communiation test with the server.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.clientSocket">
            <summary>The socket to be use during connection and data
            transmission wth the server
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient._TargetServerInfo">
            <summary>
            Holds both the IP end point and the port number of the target server.
            (<c>EasyServer</c>'s objects listens by default on port 2222).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.ClientName">
            <summary>
            Holds the name of the <c>EasyClient</c> object;
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient._GeneralPriority">
            <summary>
            Holds the float value of the <c>EasyClient</c> process priority.
            Controls the response time of the <c>EasyClient</c> to some events.
            View the <c>GeneralPriority</c> propertie for more info.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient._DataScanPriority">
            <summary>
            The actual priority of executing new data scan, over other system threads.
            </summary>
            <remarks>Default value is 'Normal'</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.NetStream">
            <summary>The <c>Networkstream</c> of the client's socket.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.BinaryCaster">
            <summary>A serialize tool to write objects to the NetStream member.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient._LastDataSentTime">
            <summary>
            Keeps track of the last time a message was sent to the server.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.NewDataScanner">
            <summary>
            This thread scans for data arrival from the server.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.ByPassDataToSend">
            <summary>
            Reffrence to object that is used in the <c>SendData</c> async overloads 
            functions. This is used to pass data to the <c>SendDataByPass</c> function
            without arguments (To activate as a separate thread).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.IsAsyncMode">
            <summary>
            Indicates for function is here current call is asynchronic.
            </summary>
            <remarks>By defalut is false and get so after every async call.</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.DoThreads">
            <summary>
            When this flag is off, all the user defined threads, calling <c>Abort()</c>
            on them selfs. This is done from <c>Dispose()</c>;
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.IsTestComAsyncOn">
            <summary>
            Flag is on when using the <c>TestCommunication()</c> asynchroniclly,
            and marks it not to throw exceptions but to use the proper event handler instead.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnDataArrived">
            <summary>Data arrived event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnDataSent">
            <summary>Data sent event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnConnecting">
            <summary>Connecting to server event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnConnected">
            <summary>Connected to server event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnDisconnecting">
            <summary>Disconnecting from server event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnDisconnected">
            <summary>Disconnected from server event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnComTestStarted">
            <summary>Communication test start event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnComTestEnded">
            <summary>Communication ends start event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnConnectionTimeOut">
            <summary>Connection attempt TimeOut event handler.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnDataSendAsyncError">
            <summary>
            Been called when error accures while sending data using <c>DataSendAsync</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.OnTestComAsyncError">
            <summary>
            Been called when error accures while testing communication asynchroniclly <c>TestCommunicationAsync</c>.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.Dispose">
            <summary>
            Releasing resources
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.CloseThread">
            <summary>
            This function keep on going till it's make sure all 
            the threads are fully stoped.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor">
            <summary>
            Creates new instance of anonymous <c>EasyClient</c>.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor(System.String)">
            <summary>
            Creates new instance of <c>EasyClient</c> with a name.
            </summary>
            <param name="ClientName">The name of this EasyClient</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor(JadBenAutho.EasySocket.EasyServer)">
            <summary>
            Creates new instance of anonymous <c>EasyClient</c>.
            </summary>
            <param name="TargetServer">The server to connect to.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor(JadBenAutho.EasySocket.EasyServer,System.String)">
            <summary>
            Creates new instance of <c>EasyClient</c> with a name.
            </summary>
            <param name="TargetServer">The server to connect to.</param>
            <param name="ClientName">The name of this EasyClient</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor(JadBenAutho.EasySocket.ServerInfo)">
            <summary>
            Creates new instance of anonymous <c>EasyClient</c>.
            </summary>
            <param name="TargetServerInfo">Information about the server to connect to.</param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the given ServerInfo isn't legal.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.#ctor(JadBenAutho.EasySocket.ServerInfo,System.String)">
            <summary>
            Creates new instance of <c>EasyClient</c> with a name.
            </summary>
            <param name="TargetServerInfo">Information about the server to connect to.
            </param>
            <param name="ClientName">The name of this <c>EasyClient</c></param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the given ServerInfo isn't legal.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.ConnectToServerAsync">
             <summary>
             Attempts to create a connection to the server if not connected already.
             This function isn't synchronized so the client will not be connected right after
             the function (using the <c>SendData()</c> functions is safe though and taking
             it under consideration). Any way you can always use the <c>IsConnected</c> property.
             </summary>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            Thrown when the information about the server is
            incorrect or unset and on general connection errors.
            </exception>
            <remarks>
             This function calls another asynchronic function that attempts to establish
             a connection. Within this function, if no connection made, event handler 
             named <c>OnConnectionTimeOut()</c> is called instead of using Exceptions 
             (you  better use this one).
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.DisconnectFromServer">
            <summary>
            Disconnect from server and closes the client <c>Socket</c> if connected.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.DisconnectFromServerAsync">
            <summary>
            This is the asynchronic overload of the function(Not waiting for results).
            Disconnect from server and closes the client socket if connected.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.SendData(System.Object)">
            <summary>
            Sending an object to the server.
            </summary>
            <param name="DataToSend">The object to send to the server.</param>
            <remarks>The <c>DataToSend</c> object must be serializable</remarks>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            Thrown on attempt to send data when client is disconneted, or when
            connection was made during attempt to send data.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.SendDataAsync(System.Object)">
             <summary>
             This is the asynchronic overload of the function(Not waiting for results).
             </summary>
             <param name="DataToSend">The object to send to the server.</param>
            <remarks>
             Since this function is asynchronic, no exceptions are thrown 
             Instead use the <c>OnDataSendAsyncError</c> event handler.
             The send object must be serializable. Sending nulled object will take no action.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.TestCommunication">
            <summary>
            Testing the comunication with an <c>EasyServer</c> type server by
            sending a message and waiting for conformation from the server.
            </summary>
            <remarks>
            This function should be used only when connecting to <c>EasyServer</c> type.
            In addition the <c>ComTestStatus</c> is been updated(use it to get the test results).
            Use this only when needed cos' it cost alot of time.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.TestCommunicationAsync">
             <summary>
             This is the asynchronic overload of the function(Not waiting for test results).
             Testing the comunication with an <c>EasyServer</c> type server by
             sending a message and waiting for conformation from the server.
             This function should be used only when connecting to <c>EasyServer</c> type.
             In addition the <c>ComTestStatus</c> is updated.
             </summary>
            <remarks>
             Since this function is asynchronic, no exceptions are thrown 
             Instead use the <c>OnTestComAsyncError</c> event handler.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.ToString">
            <summary>
            Returns the string representation of the <c>EasyClient</c> Object.
            </summary>
            <returns>string representation of the <c>EasyClient</c> Object.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.ConnectingToServer(System.IAsyncResult)">
            <summary>Called when a connection attempt with the server is made.
            </summary>
            <param name="ConnectionStatus">Information about the connection attempt.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.SendCommand(JadBenAutho.EasySocket.EasyClient.EasySocketCommands)">
            <summary>
            Sending a spechial command or message to the server with
            the <c>SendData</c> function.
            </summary>
            <remarks>
            This should be used only when communicating with <c>EasyServer</c> server type.
            </remarks>
            <param name="Command">The command\message to the server.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.ScanForData">
            <summary>
            This function scans for data dispached from server machine constantly.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClient.SendDataByPass">
            <summary>
            This function calls the <c>SendData</c> function and sends as an argument
            the <c>ByPassDataToSend</c> private member. It's should run as a separate
            thraed and by so cating asynchronic version of <c>SendData.</c>
            </summary>
            <remarks>
            <c>ByPassDataToSend</c> should refer the data to be sent.
            </remarks>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.IsReadyToConnect">
            <summary>
            Indicated weather the <c>EasyClient</c> is ready to connect the server.
            If not, the server info is unset or illegal. Use <c>TargetServerInfo</c>
            property to solve this problem.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.ComTestStatus">
            <summary>
            Gets the status of the communication test (Runs from the function <c>TestCommunication</c>)
            This test isn't runs by by itself and it is intended only for communication with
            <c>EasyServer</c> server type.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.LastTimeDataSent">
            <summary>
            Gets the last time the client sent data to the server or the time that the 
            <c>EasyClient</c> object created (if no data was sent).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.TargetServerInfo">
            <summary>
            Gets or sets the information on the server that this
            <c>EasyClient</c> will connect to.
            </summary>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When setting non legal ServerInfo.
            </exception>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.GeneralPriority">
            <summary>
            Gets or sets the general <c>Priority</c> of this <c>EasyClient</c> process
            and controls the response time of the <c>EasyClient</c> to some events.
            </summary>
            <remarks>
            This priority isn't actually priority over other process instead,
            it's controls the number of times, the proccess will call during a time sequence.
            </remarks>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.DataScanPriority">
            <summary>
            Gets or sets the actual priority of executing new data scan process
            over other system threads.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.Name">
            <summary>
            Gets or sets the name of this <c>EasyClient</c> object.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.ClientSocket">
            <summary>
            Gets the <c>Socket</c> of this <c>EasyClient</c> object.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.NetworkStream">
            <summary>
            Gets the <c>NetworkStream</c> of the <c>EasyClient</c>'s socket.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClient.IsConnected">
            <summary>
            Indicated whether the <c>EasyClient</c> is connected to a server.
            This info is reffrenced to the last data was 
            send\received\connection was made so don't trust on it right away
            unless you've just send\received\connection was made
            (Alternative is to call <c>ConnectionTest</c> function )
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.DataSent">
            <summary>Invoked when data is sent from the client to the server.</summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.DataArrived">
            <summary>Invoked when data is arriving from the client to the client.</summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.ComTestStarted">
            <summary>
            Invoked when a function communication test function starts.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.ComTestEnded">
            <summary>
            Invoked when a function communication test function ends.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.Connecting">
            <summary>
            Invoked when the client attempts to connect the server.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.Connected">
            <summary>
            Invoked when the client is successfully connected to the server.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.Disconnecting">
            <summary>
            Invoked when the client is begins disconnecting from the server.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.Disconnected">
            <summary>
            Invoked when the client is begins disconnecting from the server.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.ConnectionTimeOut">
            <summary>
            Involed when a connection attempt to the server is failed,
            (Attempted to connect to server for some time without results).
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.DataSendAsyncError">
            <summary>
            Invoked when error accures while sending data asynchroniclly using 
            <c>DataSendAsync</c> only.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyClient.TestComAsyncError">
            <summary>
            Invoked when error accures while testing communication asynchroniclly using 
            <c>TestCommunicationAsync</c> only.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyClient.TestingStatus">
            <summary>Representing the status of communication test.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.TestingStatus.NotTested">
             <summary>
            Indicates that no communication test was made.
             </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.TestingStatus.TestedOK">
             <summary>
            Indicates communication test was made and went OK.
             </summary>summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.TestingStatus.TestFailed">
            Indicates communication test was made and went wrong.
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.TestingStatus.Testing">
            <summary>
            Indicates communication test is running.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyClient.EasySocketCommands">
            <summary>
            Set of commands to store commands from the server or the client.
            Not for client programmers, it's hidden from other users.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.EasySocketCommands.TestCom">
            <summary>
            Informing that the sended\arrived is a communication test
            and should be responded with <c>TestComOk</c> command.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.EasySocketCommands.TestComOK">
            <summary>
            An OK repsonce to the TestCom command.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyClient.EasySocketCommands.Disconnecting">
            <summary>
            This command tells that the sender is disconnecting. 
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyClientsList">
            <summary>
            A collection of <c>EasyClients</c> objects.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Add(JadBenAutho.EasySocket.EasyClient)">
            <summary>
            Adds an client object to the <c>EasyClients</c> collection.
            </summary>
            <param name="ClientObject"><c>EasyClient</c> object to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Insert(System.Int32,JadBenAutho.EasySocket.EasyClient)">
            <summary>
            Inserts an item to the <c>EasyClientsList</c> at the specified position.
            </summary>
            <param name="Index">
            The zero-based index at which value should be inserted.
            </param>
            <param name="ClientObject">
            The <c>EasyClient</c> to insert into the <c>>EasyClientsList</c>.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Remove(JadBenAutho.EasySocket.EasyClient)">
            <summary>
            removes the first occurrence of a specific object from the EasyClientsList.
            </summary>
            <param name="ClientObject">
            The EasyClient to remove from the EasyClientsList. 
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.RemoveAt(System.Int32)">
            <summary>
            Removes the EasyClientsList item at the specified index.
            </summary>
            <param name="Index">The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Clear">
            <summary>
            Removes all items from the <c>EasyClientsList</c>;
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Equals(JadBenAutho.EasySocket.EasyClientsList)">
            <summary>
            Determines whether two <c>EasyClientsLists</c> instances are equal.
            </summary>
            <param name="ClientsList">
            <c>EasyClientsLists</c> object to compare with the current one.
            </param>
            <returns>Boolean flag indicates wheather the elements are equal.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Contains(JadBenAutho.EasySocket.EasyClient)">
            <summary>
            Determines whether the <c>EasyClientsList</c> contains a specific value.
            </summary>
            <param name="ClientObject">
            The <c>EasyClient</c> object to locate in the <c>EasyClientsList</c>.
            </param>
            <returns>
            True if the <c>EasyClient</c> is found in the <c>EasyClientsList</c>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.IndexOf(JadBenAutho.EasySocket.EasyClient)">
            <summary>
            Determines the index of a specific item in the <c>EasyClientsList</c>.
            </summary>
            <param name="ClientObject">
            The <c>EasyClient</c> to locate in the <c>EasyClientsList</c>.
            </param>
            <returns>
            The index of value if found in the <c>EasyClientsList</c>; otherwise, -1.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyClientsList.Dispose">
            <summary>
            Releases resources
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyClientsList.Item(System.Int32)">
            <summary>
            Gets or sets the <c>EasyClient</c> object at the given location.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.ClientRejected_EventHandler">
            <summary>
            Been called when client on the black list, attempts to connect the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.DataArrived2Server_EventHandler">
            <summary>
            Been called when data is arrived from the server.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyServer">
            <summary>
            <c>EasyServer</c> is a advanced implementation of the .NET Winsock TCP\IP Server,
            It has almost everything build in.
            It was developeed and designed with the <c>EasyClient</c> class (Although they work
            excellent together and advice to do so, it can workwith any other client implementation).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ServerPort">
            <summary>Hold the port number that the server listens to.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.SmartManagementOn">
            <summary>
            Indicates of the <c>SmartManagement</c> function enabled
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer._MinutsTillDisconnecting">
            <summary>
            Relevant only if the <c>SmartManagement</c> function is running
            Number of minuts that a client "allowed" not to communicate with the server,
            without been disconnected by the server( default value is 1).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ServerName">
            <summary>
            Holds the name of the <c>EasyServer</c> object;
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer._GeneralPriority">
            <summary>
            Holds the float value of the <c>EasyServer</c> process priority.
            Controls the response time of the <c>EasyServer</c> to some events.
            View the <c>GeneralPriority</c> propertie for more info.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer._DataScanPriority">
            <summary>
            The actual priority of executing new data scan, over other system threads.
            </summary>
            <remarks>Default value is 'Normal'</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer._ClientsScanPriority">
            <summary>
            The actual priority of executing new clients scan, over other system threads.
            </summary>
            <remarks>Default value is 'Normal'</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer._SmartManagmentPriority">
            <summary>
            The actual priority of executing <c>SmartManagment()</c> function,
            over other system threads.
            </summary>
            <remarks>Default value is 'Normal'</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ClientsSocketsList">
            <summary>Holds all the clients sockets that are connected to the server.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.BlackListIPs">
            <summary>
            List of clients IP address that the <c>EasyServer</c> should reject 
            connection attempts from.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.Listener">
            <summary>Listens for initial connections from clients.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.NewClientsScanner">
            <summary>
            This thread scans for new clients and adds them to the clients list.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.SmartManagementThread">
            <summary>
            This thread runs the <c>SmartManagement()</c> function.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.NewDataScanner">
            <summary>
            This thread scans for data arrival from the clients.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ServInfo">
            <summary>
            Holds the data of this server incase someone will want it.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.BinaryCaster">
            <summary>A serialize tool to write objects to the <c>NetStream</c>.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ByPassDataToSend">
            <summary>
            Reffrence to object that is used in the <c>SendData</c> async overloads 
            functions. This is used to pass data to the <c>SendDataByPass</c> function
            without arguments (To activate as a separate thread).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ByPassTargetClient">
            <summary>
            Index to a client in the <c>ClientSocketList</c> to send data in asyncronic way.
            been used in the <c>SendDataAsync(object DataToSend, int TargetClientIndex)</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.ByPassTargetClientInfo">
            <summary>
            Info of client to send data in asyncronic way.
            been used in the <c>SendDataAsync(object DataToSend, ClientInfo TargetClient)</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.IsAsyncMode">
            <summary>
            Indicates for function is here current call is asynchronic.
            </summary>
            <remarks>By defalut is false and get so after every async call.</remarks>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.DoThreads">
             <summary>
            When this flag will turn true, all the threads
            will close themselfs(after <c>Dispose()</c> is called ).
             </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.OnDataArrived">
            <summary>Data arrived event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.OnDataSent">
            <summary>Data sent event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.OnClientRejected">
            <summary>Client rejected arrived event handlers delegate.</summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.OnDataSendAsyncError">
            <summary>
            Been called when error accures while sending data Asynchronicly.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.CloseThread">
            <summary>
            This function keep on going till it's make sure all 
            the threads are fully stoped.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.#ctor(System.Boolean)">
            <summary>
            Creates new instance of <c>EasyServer</c>,sets it's port number to 2222
            and creating a thread to listen for new clients.
            </summary>
            <param name="UseSmartManagement">
            Use\not use the <c>SmartManagment</c> advanced option, that uses set
            of rules to manage the list of clients and threads.
            </param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the <c>EasyServer</c> failed to resolve localhost\IP or creating
            <c>TCPListener</c> using the localhost and the selected port.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new instance of <c>EasyServer</c> with a name ,sets it's port
            number to 2222 and creating a thread to listen for new clients.
            </summary>
            <param name="ServerName">The name of the server</param>
            <param name="UseSmartManagement">
            Use\not use the <c>SmartManagment</c> advanced option, that uses set of rules
            to manage the list of clients and threads.
            </param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the <c>EasyServer</c> failed to resolve localhost\IP or
            creating <c>TCPListener</c> using the localhost and the selected port.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates new instance of <c>EasyServer</c>, sets it's port number to the given
            port number and creating a thread to listen for new clients.
            </summary>
            <param name="PortNumber">Port number that the server will listen on.</param>
            <param name="UseSmartManagement">
            Use\not use the <c>SmartManagment</c> advanced option, that uses set of rules
            to manage the list of clients and threads.
            </param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the <c>EasyServer</c> failed to resolve localhost\IP or creating
            <c>TCPListener</c> using the localhost and the selected port.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates new instance of <c>EasyServer</c> with a name, 
            sets it's port number to the given port number and creating a thread
            to listen for new clients.
            </summary>
            <param name="PortNumber">Port number that the server will listen on.</param>
            <param name="ServerName">The name of the server</param>
            <param name="UseSmartManagement">
            Use\not use the <c>SmartManagment</c> advanced option, that uses set of rules
            to manage the list of clients and threads.
            </param>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the EasyServer failed to resolve localhost\IP or creating <c>TCPListener</c>
            using the localhost and the selected port.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>string representation of the object.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.StartListen">
            <summary>
            Starts listening for connections attempts.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.StopListen">
            <summary>
            Stops listening for connections attempts and new incoming data.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataToAllClients(System.Object)">
            <summary>
            Sending an object to all the clients.
            </summary>
            <param name="DataToSend">The object to send to the clients.</param>
            <remarks>The sent object must be serializable.</remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataToAllClientsAsync(System.Object)">
            <summary>
            This is the asynchronic overload of the function(Not waiting for results).
            Sending an object to all the clients.
            </summary>
            <param name="DataToSend">The object to send to the clients.</param>
            <remarks>
            The object must be serializable. Sending nulled object will take no action.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendData(System.Object,JadBenAutho.EasySocket.ClientInfo)">
            <summary>
            Sending an object to a specific clients.
            </summary>
            <param name="DataToSend">The object to send to the clients.</param>
            <param name="TargetClient">
            The client to send the data.(Must be connected to the server).</param>
            <returns>true if data was send, false if not.</returns>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When the <c>ClientInfo</c> is illegal.
            </exception>
            <remarks>The send object must be serializable.</remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataAsync(System.Object,JadBenAutho.EasySocket.ClientInfo)">
             <summary>
             This is the asynchronic overload of the function(Not waiting for results).
             Sending an object to a specific clients.
             </summary>
             <param name="DataToSend">The object to send to the clients.</param>
             <param name="TargetClient">
             The client to send the data.(Must be connected to the server).
             </param>
            <remarks>
             Since this function is asynchronic, no exceptions are thrown 
             Instead use the <c>OnDataSendAsyncError</c> event handler.
             The send object must be serializable. Sending nulled object will take no action.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendData(System.Object,System.Int32)">
            <summary>
            Sending an object to a specific clients.
            </summary>
            <param name="DataToSend">The object to send to the clients.</param>
            <param name="TargetClientIndex">
            The position of the client to send the data in the <c>ClientsList</c> collection.
            .(Must be connected to the server).
            </param>
            <returns>true if data was send, false if not.</returns>
            <remarks>The object must be serializable.</remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataAsync(System.Object,System.Int32)">
             <summary>
             This is the asynchronic overload of the function(Not waiting for results).
             Sending an object to a specific clients.
             </summary>
             <param name="DataToSend">The object to send to the clients.</param>
             <param name="TargetClientIndex">
             The position of the client to send the data in the <c>ClientsList</c> collection.
             .(Must be connected to the server).
             </param>
            <remarks>
             Since this function is asynchronic, no exceptions are thrown 
             Instead use the <c>OnDataSendAsyncError</c> event handler.
             The send object must be serializable. Sending nulled object will take no action.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendCommand(JadBenAutho.EasySocket.EasyServer.EasySocketCommands,System.Int32)">
            <summary>
            Sending a spechial command or message to a client with
            the <c>SendData</c> function.
            </summary>
            <param name="Command">The command\message to the server.</param>
            <param name="TargetClientIndex">
            The position of a client in the <c>ClientsList</c> that the command ment for.
            </param>
            <remarks>This should be used only when communicating with
            <c>EasyClient</c> client type.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataToAllClientsByPass">
            <summary>
            This function calls the <c>SendDataToAllClients</c> function and sends as an argument
            the <c>ByPassDataToSend</c> private member. It's should run as a separate
            thraed and by so creating asynchronic version of <c>SendData</c>.
            </summary>
            <remarks>
            <c>ByPassDataToSend</c> should refer the data to be sent.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataIndexByPass">
            <summary>
            This function calls the <c>SendData</c> function and sends as an argument
            the <c>ByPassDataToSend</c> and <c>ByPassTargetClient</c> private members.
            It's should run as a separate thraed and by so creating asynchronic version
            of <c>SendData</c>.
            </summary>
            <remarks>
            <c>ByPassDataToSend</c> should refer the data to be sent.
            <c>ByPassTargetClient</c> should index the TargetClient in the <c>ClientsSocketList</c>.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SendDataInfoByPass">
            <summary>
            This function calls the <c>SendData</c> function and sends as an argument
            the <c>ByPassDataToSend</c> and <c>ByPassTargetClientInfo</c> private members.
            It's should run as a separate thraed and by so creating asynchronic version
            of <c>SendData</c>.
            </summary>
            <remarks>
            <c>ByPassDataToSend</c> should refer the data to be sent.
            <c>ByPassTargetClientInfo</c> should refer to information about the target client.
            </remarks>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.ScanForNewClients">
            <summary>
            This function scans for new clients that requests connect to the server
            and adds them to the <c>ClientsSocketsList</c>.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.ScanForData">
            <summary>
            This function scans for data dispached from clients machine constantly.
            </summary>
            <exception cref="T:System.IO.IOException">
            May be caused if the a client sent over data and closed the 
            connection right away.
            </exception>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SetEventHandlers">
            <summary>Sets some event handlers for the <c>ClientsSocketsList</c>.</summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.ClientsSocketsList_EmptyList">
            <summary>
            Called when ever the <c>ClientsSocketList</c> gets empty and 
            stoping the the incoming data scan thread, by so saving cpu time.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.ClientsSocketsList_FirstItemAdded">
            <summary>
            Called when ever item is added to the <c>ClientsSocketList</c>
            for the first time (Only one item). Then starting the 
            the incoming data scan thread, by so saving cpu time.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.GetClientIP(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Gets the IP adderess of a <c>SocketStream</c> object client.
            </summary>
            <param name="Client">The <c>SocketStream</c> of the client to extract IP from.</param>
            <returns>IP adderess of the client.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.GetClientIP(System.Net.Sockets.Socket)">
            <summary>
            Gets the IP adderess of a <c>Socket</c> object client.
            </summary>
            <param name="Client">The Socket of the client to extract IP from.</param>
            <returns>IP adderess of the client.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasyServer.SmartManagement">
            <summary>
            Removes cilents that connected to the server and have'nt
            created any communication for some time.
            This function should be run as a separate thread
            </summary>
            <remarks>Runs only when the '<c>SmartManagementOn</c>' flag enabled.</remarks>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.ClientsList">
            <summary>
            Gets the list of clients <c>SocketStream</c> that are connected to the server.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.GeneralPriority">
            <summary>
            Gets or sets the <c>Priority</c>c of this <c>EasyServer</c> process
            and controls the response time of the <c>EasyServer</c> to some events.
            </summary>
            <remarks>
            This priority isn't actually priority over other process instead,
            it's controls the number of times, the proccess will call during a time sequence.
            </remarks>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.DataScanPriority">
            <summary>
            Gets or sets the actual priority of executing new data scan process
            over other system threads (Deafult is normal).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.ClientsScanPriority">
            <summary>
            Gets or sets the actual priority of executing new clients scan process
            over other system threads (Deafult is normal).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.SmartManagmentPriority">
            <summary>
            Gets or sets the actual priority of executing <c>SmartManagment</c> process
            over other system threads (Deafult is normal).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.MinutsTillDisconnecting">
            <summary>
            Relevant only if the <c>SmartManagement</c> option choosed from the constructor.
            Number of minuts that a client "allowed" not to communicate with the server,
            without been disconnected by the server( default value is 1).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.PortNumber">
            <summary>
            Gets or sets the port number that the server listen to (default value is 2222).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.ServerInfo">
            <summary>Gets data on the server location and port number.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.Name">
            <summary>
            Gets or sets the name of this <c>EasyServer</c> object.
            </summary>
            <exception cref="T:JadBenAutho.EasySocket.EasySocketException">
            When attempting to set the name to null.
            </exception>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.CountClients">
            <summary>
            Gets the amount of clients that currently connected to the server.
            This info is reffrenced to the last data was 
            send\received\connection was made so don't trust on it right away
            unless you've just send\received\connection was made.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.IsReady">
            <summary>
            Indicated weather the <c>EasyServer</c> is ready for clients connections.
            If returns false, make sure you called the <c>StartListen()</c> function.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.EasyServer.BlackList">
            <summary>
            Gets or sets list of clients IP address that the <c>EasyServer</c> should reject 
            connection attempts from.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyServer.DataSent">
            <summary>Invoked when data is sent from the server to a client.</summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyServer.DataArrived">
            <summary>Invoked when data is arriving from a client to the server.</summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyServer.ClientRejected">
            <summary>
            Invoked when client on the black list, attempts to connect the server.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.EasyServer.DataSendAsyncError">
            <summary>
            Invoked when error accures while sending data asynchroniclly(instead of exception).
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasyServer.EasySocketCommands">
            <summary>
            Set of commands to store commands from the server or the client.
            Not for client programmers, it's hidden from other users.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.EasySocketCommands.TestCom">
            <summary>
            Informing that the sended\arrived is a communication test
            and should be responded with <c>TestComOk</c> command.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.EasySocketCommands.TestComOK">
            <summary>
            An OK repsonce to the TestCom command.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.EasyServer.EasySocketCommands.Disconnecting">
            <summary>
            This command tells that the sender is disconnecting. 
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.EasySocketException">
            <summary>
            <c>EasySocketException</c> exception type for the <c>EasySocket</c> namespace.
            Handles exception on <c>EasyClient</c> and <c>EasyServer</c> objects.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasySocketException.#ctor">
            <summary>Generate empty exception.</summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasySocketException.#ctor(System.String)">
            <summary>
            Generate exception with a error message.
            </summary>
            <param name="ErrorMessage">Error message.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.EasySocketException.#ctor(System.String,System.Exception)">
            <summary>
            Generate exception with error message and InnerException.
            </summary>
            <param name="ErrorMessage">Error message.</param>
            <param name="InnerException">Exception that causes current exception.</param>
        </member>
        <member name="T:JadBenAutho.EasySocket.IPsBlackList">
            <summary>
            A collection of IPs black list that the <c>EasyServer</c>
            should block connection attempt from their machines.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Add(System.String)">
            <summary>
            Adds IP address  to the <c>IPsBlackList</c> collection.
            </summary>
            <param name="BlackIP">
            The IP address for the <c>EasyServer</c> to block.
            </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the <c>IPsBlackList</c> at the specified position.
            </summary>
            <param name="Index">
            The zero-based index at which value should be inserted.
            </param>
            <param name="BlackIP">The IPAddress to insert into the IPsBlackList.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the <c>IPsBlackList</c>.
            </summary>
            <param name="BlackIP">
            The Socket to remove from the <c>IPsBlackList</c>. 
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.RemoveAt(System.Int32)">
            <summary>
            Removes from the <c>IPsBlackList</c> an item at the specified index.
            </summary>
            <param name="Index">The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Clear">
            <summary>
            Removes all items from the <c>IPsBlackList</c>;
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Equals(JadBenAutho.EasySocket.IPsBlackList)">
            <summary>
            Determines whether two <c>IPsBlackList</c> instances are equal.
            </summary>
            <param name="BlackList">
            <c>IPsBlackList</c> object to compare with the current one.
            </param>
            <returns>Boolean flag indicates whether the elements are equal.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Contains(System.String)">
            <summary>
            Determines whether the <c>IPsBlackList</c> contains a specific value.
            </summary>
            <param name="BlackIP">
            The IP address to locate in the <c>IPsBlackList</c>.
            </param>
            <returns>
            True if the string is found in the <c>IPsBlackList</c>; otherwise, false.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the <c>IPsBlackList</c>.
            </summary>
            <param name="BlackIP">
            The IP address to locate in the <c>IPsBlackList</c>.
            </param>
            <returns>
            The index of value if found in the <c>IPsBlackList</c>; otherwise, -1.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.IPsBlackList.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.IPsBlackList.Item(System.Int32)">
            <summary>
            Gets or sets the IP address at the given location.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.ServerInfo">
            <summary>
            <c>ServerInfo</c> class describs the location of the server on the net and
            the port it's listens to.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ServerInfo.IsLegal">
            <summary>
            Indicated whether the server's location is valid or not(not testing port number).
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ServerInfo.ServerPoint">
            <summary>Holds all the server location and port data.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.ServerInfo._IsEasyServer">
            <summary>Indicator for the type of the server.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.ServerInfo.#ctor(System.Net.IPEndPoint,System.Boolean)">
            <summary>Creates new instance of <c>ServerInfo</c> object.</summary>
            <param name="ServerLocation">The <c>IPEndPoint</c> of the server.</param>
            <param name="IsEasyServer">Is the server is a <c>EasyServer</c> type.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.ServerInfo.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Creates new instance of <c>ServerInfo</c> object.</summary>
            <param name="ServerIP">The IP of the server machine or
             the name of the machine (on local neteork).</param>
            <param name="PortNumber">The port number that the server listen on.</param>
            <param name="IsEasyServer">Is the server is a <c>EasyServer</c> type.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.ServerInfo.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>Creates new instance of <c>ServerInfo</c> object.</summary>
            <param name="ServerIP">The IP of the server machine.</param>
            <param name="PortNumber">The port number that the server listen on.</param>
            <param name="IsEasyServer">Is the server is a <c>EasyServer</c> type.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.ServerInfo.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>string representation of the object.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.ServerInfo.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ServerInfo.ServerEndPoint">
            <summary>Gets all the servers location and port data.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ServerInfo.PortNumner">
            <summary>Gets the port number that the server listens to.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ServerInfo.IPAddress">
            <summary>Gets the IP address of the server.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ServerInfo.IP">
            <summary>Gets the IP address of the server.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.ServerInfo.IsEasyServer">
            <summary>Indicates if the server is of <c>EasyServer</c> type.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.SocketsListEventHandler">
            <summary>
            Event handler for the <c>SocketsList</c> events.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.SocketsList">
            <summary>
            A collection of <c>SocketStream</c> objects.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.SocketsList.OnEmpty">
            <summary>
            Called when ever the <c>SocketsList</c> gets empty.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.SocketsList.OnFirstItemAdded">
            <summary>
            Called when the first item added(after was <c>SocketsList</c> empty).
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Add(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Adds an Client object to the <c>SocketsList</c> collection.
            </summary>
            <param name="SocketStreamObject">
            <c>SocketStream</c> object to add to the collection.
            </param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Insert(System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Inserts an item to the <c>SocketsList</c> at the specified position.
            </summary>
            <param name="Index">
            The zero-based index at which value should be inserted.
            </param>
            <param name="SocketStreamObject">
            The item to insert into the <c>SocketsList</c>.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Remove(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Removes the first occurrence of a specific object from the <c>SocketsList</c>.
            </summary>
            <param name="SocketStreamObject">
            The <c>SocketStream</c> to remove from the <c>SocketsList</c>. 
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.RemoveAt(System.Int32)">
            <summary>
            Removes from the <c>SocketsList</c> an item at the specified index.
            </summary>
            <param name="Index">The zero-based index of the item to remove.
            </param>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Clear">
            <summary>
            Removes all items from the <c>SocketsList</c>;
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Equals(JadBenAutho.EasySocket.SocketsList)">
            <summary>
            Determines whether two <c>SocketsList</c> instances are equal.
            </summary>
            <param name="socketsList">
            <c>SocketsList</c> object to compare with the current one.
            </param>
            <returns>Boolean flag indicates whether the elements are equal.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Contains(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Determines whether the <c>SocketsList</c> contains a specific value.
            </summary>
            <param name="SocketStreamObject">
            The <c>SocketStream</c> object to locate in the <c>SocketsList</c>.
            </param>
            <returns>
            True if the <c>SocketStream</c> is found in the <c>SocketsList</c>; otherwise, false.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.IndexOf(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Determines the index of a specific item in the <c>SocketsList</c>.
            </summary>
            <param name="SocketStreamObject">
            The <c>SocketStream</c> object to locate in the <c>SocketsList</c>.
            </param>
            <returns>
            The index of value if found in the <c>SocketsList</c>; otherwise, -1.
            </returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.RemoveUnpluggedSockets">
            <summary>
            Removes all the <c>SocketStream</c> that are not connected.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketsList.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.SocketsList.EmptyList">
            <summary>
            Called when ever the <c>SocketsList</c> gets empty.
            </summary>
        </member>
        <member name="E:JadBenAutho.EasySocket.SocketsList.FirstItemAdded">
            <summary>
            Called when the first item added(after was <c>SocketsList</c> empty).
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.SocketsList.Item(System.Int32)">
            <summary>
            Gets or sets the <c>SocketStream</c> object at the given location.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.SocketStream">
            <summary>
            <c>SocketStream</c> combines a <c>Socket</c> objects and it's <c>NetworkStream</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.SocketStream.NetStream">
            <summary>
            The corresponding <c>Networkstream</c> to the <c>Socket</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.SocketStream.socket">
            <summary>
            The corresponding <c>Socket</c> to the <c>Networkstream</c>.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.SocketStream._LastTransportTime">
            <summary>
            The last time the <c>Socket</c> was used for communication.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create a <c>SocketStream</c> object with a <c>Socket</c> and <c>NetworkStream</c>.
            </summary>
            <param name="socket">The Socket to put int the <c>SocketStream</c>.</param>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketStream.Equals(JadBenAutho.EasySocket.SocketStream)">
            <summary>
            Indicates whether the two objects are qeual.
            </summary>
            <param name="obj"></param>
            <returns>true if objects are equal, false if not.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketStream.UpdateTransportTime">
            <summary>
            Updateing the last time the socket was used for communication
            to current time.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.SocketStream.Dispose">
            <summary>
            releases resources.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.SocketStream.GetSocket">
            <summary>
            Gets the <c>Socket</c>.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.SocketStream.GetNetworkStream">
            <summary>
            Gets the <c>NetworkStream</c> of the <c>Socket</c>.
            </summary>
        </member>
        <member name="P:JadBenAutho.EasySocket.SocketStream.LastTransportTime">
            <summary>
            Gets the last time the <c>Socket</c> was used for communication.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Tools.Priority">
            <summary>
            <c>Priority</c> levels for <c>EasySocket</c> process.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.Tools.Priority.High">
            <summary>
            The highest priority level.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.Tools.Priority.Normal">
            <summary>
            The nomal priority level.
            </summary>
        </member>
        <member name="F:JadBenAutho.EasySocket.Tools.Priority.Low">
            <summary>
            The lowest priority level.
            </summary>
        </member>
        <member name="T:JadBenAutho.EasySocket.Tools.PriorityTool">
            <summary>
            This struct give set of static fuctions to deal with the
            <c>Priority</c> enum in the <c>JadBenAutho.EasySocket.Tools</c> namespace.
            </summary>
        </member>
        <member name="M:JadBenAutho.EasySocket.Tools.PriorityTool.GetValue(JadBenAutho.EasySocket.Tools.Priority)">
            <summary>
            Get the corresponding float value to the <c>Priority</c> enum.
            </summary>
            <param name="P">The <c>Priority</c> to cast.</param>
            <returns>The corresponding float value of the <c>Priority</c> enum.</returns>
        </member>
        <member name="M:JadBenAutho.EasySocket.Tools.PriorityTool.Resolve(System.Single)">
            <summary>
            Get the corresponding Priority enum to the float value.
            </summary>
            <param name="num">The float value to cast</param>
            <returns></returns>
        </member>
    </members>
</doc>
